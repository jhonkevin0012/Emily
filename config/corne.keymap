/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/led/led.h>
#include <dt-bindings/zmk/reset.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&led_strip { chain-length = <27>; };

/ {
    behaviors {
        hml: homewrow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            tapping-term-ms = <180>;
        };

        hmr: homewrow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
            tapping-term-ms = <180>;
        };

        tdenter: td_enter {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_ENTER";
            #binding-cells = <0>;
            bindings = <&kp SPACE>, <&kp ENTER>;

            tapping-term-ms = <200>;
        };
    };

    combos {
        compatible = "zmk,combos";

        LWindows {
            bindings = <&kp LGUI>;
            key-positions = <26 25>;
            layers = <0>;
        };

        MCkebimsky {
            bindings = <&Kebimsky>;
            key-positions = <5 6>;
        };

        MCF2 {
            bindings = <&kp F2>;
            key-positions = <14 15>;
            layers = <0>;
        };

        MCF5 {
            bindings = <&kp F5>;
            key-positions = <16 15>;
            layers = <0>;
        };

        MCf4 {
            bindings = <&kp F4>;
            key-positions = <3 4>;
            layers = <0>;
        };

        MCF12 {
            bindings = <&kp F12>;
            key-positions = <32 33>;
            layers = <0>;
        };

        MCF11 {
            bindings = <&kp F11>;
            key-positions = <20 21>;
            layers = <0>;
        };

        MCF6 {
            bindings = <&kp F6>;
            key-positions = <27 28>;
            layers = <0>;
        };

        MCescape {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
            layers = <1 0>;
        };

        Love {
            bindings = <&Love>;
            key-positions = <12 23>;
            layers = <2>;
        };

        MCDelete {
            bindings = <&kp DELETE>;
            key-positions = <4 5>;
            layers = <0>;
        };
    };

    macros {
        Kebimsky: WdIzq {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(K) &kp E &kp B &kp I &kp M &kp S &kp K &kp Y>;
            label = "WDIZQ";
        };

        Love: Abracito {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(Y) &kp A &kp SPACE &kp T &kp E &kp SPACE &kp D &kp I &kp J &kp E &kp SPACE &kp Q &kp U &kp E &kp SPACE &kp T &kp E &kp SPACE &kp Q &kp U &kp I &kp E &kp R &kp O &kp RS(MINUS)>;
            label = "ABRACITO";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "BAS";

            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB    &kp Q  &kp W  &kp E     &kp R  &kp T        &kp Y    &kp U                &kp I         &kp O             &kp P     &kp BSPC
&kp LCTRL  &kp A  &kp S  &kp D     &kp F  &kp G        &kp H    &hmr LEFT_BRACKET J  &hmr EQUAL K  &hmr RS(MINUS) L  &kp SEMI  &kp SQT
&kp LSHFT  &kp Z  &kp X  &kp C     &kp V  &kp B        &kp N    &kp M                &kp COMMA     &kp DOT           &kp FSLH  &kp DELETE
                         &kp LALT  &mo 1  &kp SPACE    &kp RET  &mo 2                &mo 3
            >;
        };

        layer_1 {
            bindings = <
&kp ESCAPE    &kp KP_DIVIDE    &kp N7  &kp N8  &kp N9  &kp KP_SUBTRACT    &trans   &trans    &kp UP    &trans     &trans  &trans
&trans        &kp KP_MULTIPLY  &kp N4  &kp N5  &kp N6  &kp KP_PLUS        &trans   &kp LEFT  &kp DOWN  &kp RIGHT  &trans  &trans
&kp CAPSLOCK  &kp N0           &kp N1  &kp N2  &kp N3  &kp DOT            &trans   &trans    &trans    &trans     &trans  &trans
                                       &trans  &mo 1   &trans             &kp RET  &mo 2     &trans
            >;
        };

        layer_2 {
            bindings = <
&trans  &kp AT_SIGN  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans  &trans    &trans   &mkp LCLK       &mmv MOVE_UP    &mkp RCLK        &trans           &trans
&trans  &trans       &kp LEFT_BRACKET      &kp RIGHT_BRACE        &trans  &trans    &trans   &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &trans           &trans
&trans  &trans       &kp LESS_THAN         &kp GREATER_THAN       &trans  &trans    &trans   &trans          &trans          &trans           &kp PRINTSCREEN  &studio_unlock
                                           &trans                 &mo 1   &trans    &kp RET  &mo 2           &trans
            >;
        };

        layer_3 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans   &kp K_MUTE      &kp C_VOLUME_DOWN     &kp C_VOLUME_UP       &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans   &kp C_PREVIOUS  &kp K_PLAY_PAUSE      &kp C_NEXT            &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans   &trans          &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &trans  &trans
                        &trans  &mo 1   &trans    &kp RET  &mo 2           &trans
            >;
        };
    };
};
